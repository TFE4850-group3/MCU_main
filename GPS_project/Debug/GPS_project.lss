
GPS_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800100  00800100  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a4  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b8  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000ee  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b0  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f5  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000915  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_28>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e6       	ldi	r30, 0x68	; 104
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ad 32       	cpi	r26, 0x2D	; 45
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  b2:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_28>:
	data0[rx_count0]= UDR0;
	rx_count0 = rx_count0 + 1;

}

ISR(USART1_RX_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	
	data1[rx_count1]= UDR1;
  cc:	e0 91 2c 01 	lds	r30, 0x012C
  d0:	80 91 ce 00 	lds	r24, 0x00CE
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e0 50       	subi	r30, 0x00	; 0
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	91 83       	std	Z+1, r25	; 0x01
  e2:	80 83       	st	Z, r24
	rx_count1=rx_count1+1;
  e4:	80 91 2c 01 	lds	r24, 0x012C
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 2c 01 	sts	0x012C, r24
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <init>:

void init()
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
	//set GPS in reset mode (Reset is set to low)
	PORTB = 0x00;
 104:	15 b8       	out	0x05, r1	; 5
	/* Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8);
 106:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)BAUD_PRESCALE;
 10a:	81 e8       	ldi	r24, 0x81	; 129
 10c:	80 93 c4 00 	sts	0x00C4, r24
	UBRR1H = (unsigned char)(BAUD_PRESCALE>>8);
 110:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char)BAUD_PRESCALE;
 114:	80 93 cc 00 	sts	0x00CC, r24
	/* Enable receiver and transmitter */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 118:	a1 ec       	ldi	r26, 0xC1	; 193
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	8c 91       	ld	r24, X
 11e:	88 61       	ori	r24, 0x18	; 24
 120:	8c 93       	st	X, r24
	UCSR1B |= (1<<RXEN1)|(1<<TXEN1);
 122:	e9 ec       	ldi	r30, 0xC9	; 201
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 61       	ori	r24, 0x18	; 24
 12a:	80 83       	st	Z, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 12c:	c2 ec       	ldi	r28, 0xC2	; 194
 12e:	d0 e0       	ldi	r29, 0x00	; 0
 130:	88 81       	ld	r24, Y
 132:	8e 60       	ori	r24, 0x0E	; 14
 134:	88 83       	st	Y, r24
	UCSR1C |= (1<<USBS1)|(1<<UCSZ10)|(1<<UCSZ11);
 136:	ca ec       	ldi	r28, 0xCA	; 202
 138:	d0 e0       	ldi	r29, 0x00	; 0
 13a:	88 81       	ld	r24, Y
 13c:	8e 60       	ori	r24, 0x0E	; 14
 13e:	88 83       	st	Y, r24
		
	//Enable Recieve interrupt for USART0
	UCSR0B |= (1<<RXCIE0);
 140:	8c 91       	ld	r24, X
 142:	80 68       	ori	r24, 0x80	; 128
 144:	8c 93       	st	X, r24
	//Enable Recieve interrupt for USART1
	UCSR1B |= (1<<RXCIE1);
 146:	80 81       	ld	r24, Z
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	80 83       	st	Z, r24
	//Enable Global interrupt
	sei();
 14c:	78 94       	sei
	//Activate GPS (Reset is set to high)
	PORTB |= 0x01;
 14e:	28 9a       	sbi	0x05, 0	; 5
	
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <main>:
void init();	
	
int main(void)
{
	
	DDRB = 0xff;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	84 b9       	out	0x04, r24	; 4
	init();
 15a:	0e 94 80 00 	call	0x100	; 0x100 <init>
    while (1) 
    {
		asm("nop");
 15e:	00 00       	nop
		test = test +1;
		//for (int i=0; i<22; i++) {
		//	UDR0=tx_msg0[i];
		//}
		asm("nop");
 160:	00 00       	nop
    }
 162:	fd cf       	rjmp	.-6      	; 0x15e <main+0x8>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
