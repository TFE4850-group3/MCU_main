
GPS_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001f4  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800116  00800116  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001d5  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000df  00000000  00000000  0000051d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000010b  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ac  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017b  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000acf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_28>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ef       	ldi	r30, 0xF4	; 244
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 31       	cpi	r26, 0x16	; 22
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a6 e1       	ldi	r26, 0x16	; 22
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 37       	cpi	r26, 0x70	; 112
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  b2:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_20>:
		asm("nop");
    }
}

//USART0 Rx Complete interrupt. Will only activated if RXC0 flag in UCSR0A is set
ISR(USART0_RX_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	cli();
  cc:	f8 94       	cli
	PORTB |= 0x02;
  ce:	29 9a       	sbi	0x05, 1	; 5
	data0[rx_count0]= UDR0;
  d0:	e0 91 6f 01 	lds	r30, 0x016F
  d4:	80 91 c6 00 	lds	r24, 0x00C6
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	ee 5b       	subi	r30, 0xBE	; 190
  e0:	fe 4f       	sbci	r31, 0xFE	; 254
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	91 83       	std	Z+1, r25	; 0x01
  e6:	80 83       	st	Z, r24
	rx_count0 = rx_count0 + 1;
  e8:	80 91 6f 01 	lds	r24, 0x016F
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 6f 01 	sts	0x016F, r24
	sei();
  f2:	78 94       	sei
}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_28>:

ISR(USART1_RX_vect){
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	cli();
 118:	f8 94       	cli
	PORTB |= 0x04;
 11a:	2a 9a       	sbi	0x05, 2	; 5
	data1[rx_count1]= UDR1;
 11c:	e0 91 6e 01 	lds	r30, 0x016E
 120:	80 91 ce 00 	lds	r24, 0x00CE
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	ea 5e       	subi	r30, 0xEA	; 234
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	91 83       	std	Z+1, r25	; 0x01
 132:	80 83       	st	Z, r24
	rx_count1=rx_count1+1;
 134:	80 91 6e 01 	lds	r24, 0x016E
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	80 93 6e 01 	sts	0x016E, r24
	sei();
 13e:	78 94       	sei
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <init>:

void init()
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
	//set GPS in reset mode (Reset is set to low)
	PORTB = 0x00;
 156:	15 b8       	out	0x05, r1	; 5
	/* Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8);
 158:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)BAUD_PRESCALE;
 15c:	81 e8       	ldi	r24, 0x81	; 129
 15e:	80 93 c4 00 	sts	0x00C4, r24
	UBRR1H = (unsigned char)(BAUD_PRESCALE>>8);
 162:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char)BAUD_PRESCALE;
 166:	80 93 cc 00 	sts	0x00CC, r24
	/* Enable receiver and transmitter */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 16a:	a1 ec       	ldi	r26, 0xC1	; 193
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	8c 91       	ld	r24, X
 170:	88 61       	ori	r24, 0x18	; 24
 172:	8c 93       	st	X, r24
	UCSR1B |= (1<<RXEN1)|(1<<TXEN1);
 174:	e9 ec       	ldi	r30, 0xC9	; 201
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 61       	ori	r24, 0x18	; 24
 17c:	80 83       	st	Z, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01);
 17e:	c2 ec       	ldi	r28, 0xC2	; 194
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	88 81       	ld	r24, Y
 184:	86 60       	ori	r24, 0x06	; 6
 186:	88 83       	st	Y, r24
	UCSR1C |= (1<<UCSZ10)|(1<<UCSZ11);
 188:	ca ec       	ldi	r28, 0xCA	; 202
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	88 81       	ld	r24, Y
 18e:	86 60       	ori	r24, 0x06	; 6
 190:	88 83       	st	Y, r24
		
	//Enable Recieve interrupt for USART0
	UCSR0B |= (1<<RXCIE0);
 192:	8c 91       	ld	r24, X
 194:	80 68       	ori	r24, 0x80	; 128
 196:	8c 93       	st	X, r24
	//Enable Recieve interrupt for USART1
	UCSR1B |= (1<<RXCIE1);
 198:	80 81       	ld	r24, Z
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	80 83       	st	Z, r24
	//Enable Global interrupt
	sei();
 19e:	78 94       	sei
	//Activate GPS (Reset is set to high)
	PORTB |= 0x01;
 1a0:	28 9a       	sbi	0x05, 0	; 5
	
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <main>:
int main(void)
{
	uint8_t data = 0;
	int c = 0;
	
	DDRB = 0xff;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	84 b9       	out	0x04, r24	; 4
	init();
 1ac:	0e 94 a9 00 	call	0x152	; 0x152 <init>
void init();	

int main(void)
{
	uint8_t data = 0;
	int c = 0;
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	71 e0       	ldi	r23, 0x01	; 1
 1b8:	26 e1       	ldi	r18, 0x16	; 22
 1ba:	31 e0       	ldi	r19, 0x01	; 1
    while (1) 
    {
		
		asm("nop");
		for(int i = 0; i<22; i++){
			while ( !(UCSR1A & (1 << UDRE1)) )
 1bc:	e8 ec       	ldi	r30, 0xC8	; 200
 1be:	f0 e0       	ldi	r31, 0x00	; 0
			;
			//data=0xff;
			data = tx_msg1[i];
			UDR1=data;
 1c0:	ce ec       	ldi	r28, 0xCE	; 206
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
		
		//d=0xFF;
		c = c + 1;
		if(c==2){
			asm("nop");
			c=0;
 1c4:	10 e0       	ldi	r17, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
	DDRB = 0xff;
	init();
    while (1) 
    {
		
		asm("nop");
 1c8:	00 00       	nop
 1ca:	db 01       	movw	r26, r22
		for(int i = 0; i<22; i++){
			while ( !(UCSR1A & (1 << UDRE1)) )
 1cc:	80 81       	ld	r24, Z
 1ce:	85 ff       	sbrs	r24, 5
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <main+0x24>
			;
			//data=0xff;
			data = tx_msg1[i];
 1d2:	8d 91       	ld	r24, X+
			UDR1=data;
 1d4:	88 83       	st	Y, r24
	init();
    while (1) 
    {
		
		asm("nop");
		for(int i = 0; i<22; i++){
 1d6:	a2 17       	cp	r26, r18
 1d8:	b3 07       	cpc	r27, r19
 1da:	c1 f7       	brne	.-16     	; 0x1cc <main+0x24>
			data = tx_msg1[i];
			UDR1=data;
		}
		
		//d=0xFF;
		c = c + 1;
 1dc:	4f 5f       	subi	r20, 0xFF	; 255
 1de:	5f 4f       	sbci	r21, 0xFF	; 255
		if(c==2){
 1e0:	42 30       	cpi	r20, 0x02	; 2
 1e2:	51 05       	cpc	r21, r1
 1e4:	19 f4       	brne	.+6      	; 0x1ec <main+0x44>
			asm("nop");
 1e6:	00 00       	nop
			c=0;
 1e8:	41 2f       	mov	r20, r17
 1ea:	59 2f       	mov	r21, r25
		}
		asm("nop");
 1ec:	00 00       	nop
    }
 1ee:	ec cf       	rjmp	.-40     	; 0x1c8 <main+0x20>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
