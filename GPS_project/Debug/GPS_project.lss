
GPS_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000027e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025e  0080010e  0080010e  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002ec  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c2  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000199  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000228  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000239  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000f45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_20>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee e7       	ldi	r30, 0x7E	; 126
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 30       	cpi	r26, 0x0E	; 14
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	23 e0       	ldi	r18, 0x03	; 3
  a0:	ae e0       	ldi	r26, 0x0E	; 14
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ac 36       	cpi	r26, 0x6C	; 108
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  b2:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_21>:
	rx0_count = rx_routine(&UDR0, &data0, rx0_count);
	sei();
}

//USART0 UDRIE interrupt. Will only activate if transmit register is empty.
ISR(USART0_UDRE_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	cli();
  cc:	f8 94       	cli
	UDR0= tx_msg[tx0_count];
  ce:	e0 91 12 01 	lds	r30, 0x0112
  d2:	f0 91 13 01 	lds	r31, 0x0113
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	80 81       	ld	r24, Z
  dc:	80 93 c6 00 	sts	0x00C6, r24
	//Turn off transmitt interrupt when message is sent
	if(tx0_count==(sizeof(tx_msg)/sizeof(tx_msg[0]))-1){
  e0:	80 91 12 01 	lds	r24, 0x0112
  e4:	90 91 13 01 	lds	r25, 0x0113
  e8:	0c 97       	sbiw	r24, 0x0c	; 12
  ea:	81 f4       	brne	.+32     	; 0x10c <__vector_21+0x52>
	  msg_check = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 0f 01 	sts	0x010F, r25
  f4:	80 93 0e 01 	sts	0x010E, r24
	  tx0_count = 0;
  f8:	10 92 13 01 	sts	0x0113, r1
  fc:	10 92 12 01 	sts	0x0112, r1
	  UCSR0B &= ~(1<<UDRIE0);
 100:	e1 ec       	ldi	r30, 0xC1	; 193
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	80 83       	st	Z, r24
 10a:	09 c0       	rjmp	.+18     	; 0x11e <__vector_21+0x64>
	}else{
	  tx0_count = tx0_count + 1;
 10c:	80 91 12 01 	lds	r24, 0x0112
 110:	90 91 13 01 	lds	r25, 0x0113
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 13 01 	sts	0x0113, r25
 11a:	80 93 12 01 	sts	0x0112, r24
	}
	sei();
 11e:	78 94       	sei
	
}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <rx_routine>:

int rx_routine(uint8_t *rx_mod, char *data, int count)
{
	char temp;
	temp = *rx_mod;
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
	
	//Dump all data when receiving command response
	if((temp==0xa1)&&(data[count-1]==0xa0)){			
 136:	81 3a       	cpi	r24, 0xA1	; 161
 138:	79 f4       	brne	.+30     	; 0x158 <rx_routine+0x26>
 13a:	fb 01       	movw	r30, r22
 13c:	e4 0f       	add	r30, r20
 13e:	f5 1f       	adc	r31, r21
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	90 81       	ld	r25, Z
 144:	90 3a       	cpi	r25, 0xA0	; 160
 146:	41 f4       	brne	.+16     	; 0x158 <rx_routine+0x26>
		data[0]=data[count-1];
 148:	80 ea       	ldi	r24, 0xA0	; 160
 14a:	fb 01       	movw	r30, r22
 14c:	80 83       	st	Z, r24
		count=1;		
	}
	data[count]= temp;
 14e:	81 ea       	ldi	r24, 0xA1	; 161
 150:	81 83       	std	Z+1, r24	; 0x01
	count = count + 1;
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
	//Dump all data when receiving command response
	if((temp==0xa1)&&(data[count-1]==0xa0)){			
		data[0]=data[count-1];
		count=1;		
	}
	data[count]= temp;
 158:	fb 01       	movw	r30, r22
 15a:	e4 0f       	add	r30, r20
 15c:	f5 1f       	adc	r31, r21
 15e:	80 83       	st	Z, r24
	count = count + 1;
 160:	ca 01       	movw	r24, r20
 162:	01 96       	adiw	r24, 0x01	; 1
	//Dump data when data buffer is too big
	if(count==290){
 164:	82 32       	cpi	r24, 0x22	; 34
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	9f 07       	cpc	r25, r31
 16a:	11 f4       	brne	.+4      	; 0x170 <rx_routine+0x3e>
		count = 0;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return count;
}
 170:	08 95       	ret

00000172 <__vector_20>:
	  asm("nop");
	}
}

//USART0 Rx Complete interrupt. Will only activated if RXC0 flag in UCSR0A is set
ISR(USART0_RX_vect){
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	cli();
 194:	f8 94       	cli
	rx0_count = rx_routine(&UDR0, &data0, rx0_count);
 196:	40 91 10 01 	lds	r20, 0x0110
 19a:	50 91 11 01 	lds	r21, 0x0111
 19e:	60 e4       	ldi	r22, 0x40	; 64
 1a0:	72 e0       	ldi	r23, 0x02	; 2
 1a2:	86 ec       	ldi	r24, 0xC6	; 198
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 99 00 	call	0x132	; 0x132 <rx_routine>
 1aa:	90 93 11 01 	sts	0x0111, r25
 1ae:	80 93 10 01 	sts	0x0110, r24
	sei();
 1b2:	78 94       	sei
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <USART_init>:
}

void USART_init()
{
	//set GPS in reset mode (Reset is set to low)
	PORTB &= ~(1<<DDB0);		
 1d6:	28 98       	cbi	0x05, 0	; 5
	/* Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8);
 1d8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)BAUD_PRESCALE;
 1dc:	83 e3       	ldi	r24, 0x33	; 51
 1de:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 1e2:	e1 ec       	ldi	r30, 0xC1	; 193
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 61       	ori	r24, 0x18	; 24
 1ea:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01);
 1ec:	a2 ec       	ldi	r26, 0xC2	; 194
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	8c 91       	ld	r24, X
 1f2:	86 60       	ori	r24, 0x06	; 6
 1f4:	8c 93       	st	X, r24
	//Enable Recieve interrupt for USART0
	UCSR0B |= (1<<RXCIE0);
 1f6:	80 81       	ld	r24, Z
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	80 83       	st	Z, r24
	//Enable interrupt when transmit register is ready to be written to
	UCSR0B |= (1<<UDRIE0);	
 1fc:	80 81       	ld	r24, Z
 1fe:	80 62       	ori	r24, 0x20	; 32
 200:	80 83       	st	Z, r24
	//Activate GPS (Reset is set to high)	
	PORTB |= 0x01;
 202:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	84 e3       	ldi	r24, 0x34	; 52
 208:	9c e0       	ldi	r25, 0x0C	; 12
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <USART_init+0x34>
 212:	00 c0       	rjmp	.+0      	; 0x214 <USART_init+0x3e>
 214:	00 00       	nop
	_delay_ms(500);
	asm("nop");
 216:	00 00       	nop
 218:	08 95       	ret

0000021a <main>:
{
    /*------------------------------- INITIALIZATION PHASE -------------------------- */
    /* ------------------------------------------------------------------------------ */
	int par_check = 0;
	/* Set PORTA as output for parallel data out */
	DDRA = 0xFF;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	81 b9       	out	0x01, r24	; 1
	//set PB0 as output (connected to reset on GPS-module)
	DDRB = (1<<DDB0);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	84 b9       	out	0x04, r24	; 4
	//set PB2 and PB3 as input, sensing for framestart
	DDRB &= ~(1<<DDB2);
 222:	22 98       	cbi	0x04, 2	; 4
	DDRB &= ~(1<<DDB3);
 224:	23 98       	cbi	0x04, 3	; 4
	//USART initialization
	USART_init();
 226:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <USART_init>
	//Enable Global interrupt	
	sei();
 22a:	78 94       	sei
	  if((PINB & (1<<PINB3))&&((PINB & (1<<PINB2))&&(par_check == 0))){
			/* Turn of global interrupt because we don't want data storage in data buffer to
			be messed up when altering data buffer*/
			cli();
			par_check == 1;
			PORTA = data0[0];
 22c:	c0 e4       	ldi	r28, 0x40	; 64
 22e:	d2 e0       	ldi	r29, 0x02	; 2
 230:	41 e4       	ldi	r20, 0x41	; 65
 232:	52 e0       	ldi	r21, 0x02	; 2
 234:	2d e6       	ldi	r18, 0x6D	; 109
 236:	33 e0       	ldi	r19, 0x03	; 3
	while (1) 
	{   
	  /* If Framestart (PB3 and PB1) is set, send parallel data out on PORTA */
	  /* If data already sent during same framestart interval, do not send more data */

	  if((PINB & (1<<PINB3))&&((PINB & (1<<PINB2))&&(par_check == 0))){
 238:	1b 9b       	sbis	0x03, 3	; 3
 23a:	1d c0       	rjmp	.+58     	; 0x276 <main+0x5c>
 23c:	1a 9b       	sbis	0x03, 2	; 3
 23e:	1b c0       	rjmp	.+54     	; 0x276 <main+0x5c>
			/* Turn of global interrupt because we don't want data storage in data buffer to
			be messed up when altering data buffer*/
			cli();
 240:	f8 94       	cli
			par_check == 1;
			PORTA = data0[0];
 242:	88 81       	ld	r24, Y
 244:	82 b9       	out	0x02, r24	; 2
 246:	fa 01       	movw	r30, r20
 248:	de 01       	movw	r26, r28
			//Delete the sent data in databuffer, and shift array
			for (int i = 0; i<(sizeof(data0)/sizeof(data0[0]));i++){
				data0[i]=data0[i+1];
 24a:	81 91       	ld	r24, Z+
 24c:	8d 93       	st	X+, r24
				if(rx0_count >0){
 24e:	80 91 10 01 	lds	r24, 0x0110
 252:	90 91 11 01 	lds	r25, 0x0111
 256:	18 16       	cp	r1, r24
 258:	19 06       	cpc	r1, r25
 25a:	4c f4       	brge	.+18     	; 0x26e <main+0x54>
					rx0_count = rx0_count - 1;
 25c:	80 91 10 01 	lds	r24, 0x0110
 260:	90 91 11 01 	lds	r25, 0x0111
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	90 93 11 01 	sts	0x0111, r25
 26a:	80 93 10 01 	sts	0x0110, r24
			be messed up when altering data buffer*/
			cli();
			par_check == 1;
			PORTA = data0[0];
			//Delete the sent data in databuffer, and shift array
			for (int i = 0; i<(sizeof(data0)/sizeof(data0[0]));i++){
 26e:	e2 17       	cp	r30, r18
 270:	f3 07       	cpc	r31, r19
 272:	59 f7       	brne	.-42     	; 0x24a <main+0x30>
				data0[i]=data0[i+1];
				if(rx0_count >0){
					rx0_count = rx0_count - 1;
				}
			}
	      sei();
 274:	78 94       	sei
	  }else{
	    par_check =0;
	  }
	  asm("nop");
 276:	00 00       	nop
	}
 278:	df cf       	rjmp	.-66     	; 0x238 <main+0x1e>

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
